~~
~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/doxia/references/apt-format.html

 ------
 Introduction
 ------
 Karl Heinz Marbaise
 ------
 2013-01-12
 ------

Iterator Maven Plugin

  The basic idea of this plugin is to make iterations over a list of values possible. This
  means having a list of values like: <<<one, two, three>>> and execute other plugins or
  Maven instances and give the current value as a parameter to the plugin or to the appropriate
  Maven call.

  But more practical might be to think about the list as a list of environments like production,
  test, qa, development etc. This list of environments can be defined in the configuration area 
  of the plugin like this:
  
+-------
<items>
  <item>production</item>
  <item>test</item>
  <item>qa</item>
  <item>development</item>
</items>
+-------

  It is also possible to define the list of environments like this:
  
+-------
  <content>production,test,qa,development</content>
+-------


  A special configuration can be used to define the items and properties in 
  combination.

+-------
<itemsWithProperties>
  <itemWithProperty>
    <name>production</name>
    <properties>
      <key>value1</key>
  </properties>
  </itemWithProperty>
  <itemWithProperty>
    <name>test</name>
    <properties>
      <key>value2</key>
    </properties>
  </itemWithProperty>
  <itemWithProperty>
    <name>qa</name>
    <properties>
      <key>value3</key>
    </properties>
  </itemWithProperty>
  <itemWithProperty>
    <name>development</name>
    <properties>
      <key>value4</key>
    </properties>
  </itemWithProperty>
</itemsWithProperties>
+-------


 Use whatever fits your needs better.

* Goals Overview

  There are currently two goals <{{{./iterator-mojo.html}iterator}}> and <{{{./invoker-mojo.html}invoker}}>.
  The <{{{./iterator-mojo.html}iterator}}> goal is intended to call one or more plugins during the iterations
  over the given list of items where as the <{{{./invoker-mojo.html}invoker}}> is intended to call
  Maven during the iterations.
  
  A pseudo code equivalent would look like the following: 
  
+----
List items = [prod, test, qa]
  
foreach (item : items) {
  execute.Plugin (item)
}
+----

  The <{{{./invoker-mojo.html}invoker}}> goal is intended to call a separate maven instance, like
  calling maven on command line, with the different possibilities of giving the iterated item. 

  A pseudo code equivalent would look like the following: 

+----
List items = [prod, test, qa]
  
foreach (item : items) {
  mvn -P${item} package
}
+----


* Usage

  The iterator-maven-plugin can be bound to any {{{http://maven.apache.org/ref/current/maven-core/lifecycles.html}lifecycle phase}}
  you like.

+-----
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>iterator</goal>
            </goals>
            <configuration>
              <pluginExecutors>
            	<pluginExecutor>
            	  ..
            	</pluginExecutor>
            	<pluginExecutor>
                  ..
            	</pluginExecutor>
              </pluginExecutors>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  ...
</project>
+-----


  []
